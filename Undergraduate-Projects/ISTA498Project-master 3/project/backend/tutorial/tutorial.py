
from tkinter.tix import Tree


class Tutorial:
    
    """
        To initialise an instance of a Tutorial object the base requirements are the following:
            * url - A raw String value (ie: r'https://LoremIpsum.com/some')
                |- To not need to tip toe around escape chars
            * category - A String/Enum value 
                |- Depending on our final implementation if we make Enums of a limited set of
                   possible categories. Either can be set in a header file somewhere in the
                   backend along with all the other globals
            * checks - For now an Int detailing a binary (ie: 0b11111111) value of its length
                |- I made this an an optional constructor parameter because this might have to
                   be flexible if the amount of checks to the user need to be increased or 
                   decreased for a particular instance -- maybe a max i think will be useful
                |--- On why I think this being a binary value might be a good idea :
                     If the User object has a map of tutorials accessed lets call this 'accessed'
                     where accessed is structured something akin to this: {tutorial_id(key): 0b00000(user bin val)}
                     well if the tutorial associated with the id has a completion value of lets say 11111 an XOR
                     check tells u that given the 0b00000 from the example the user has only started. When they complete
                     a check we add (OR) '1' to their val so thats 0b00001 (after this it is just a bit shift left << before the OR).
                     Once we know that their value XOR the tutorial completion is 0 they are done,and then we can append this tutorial
                     to the completed map or array if we need/have one. Very cheaply too no data structure needed.
                |--- Where this implementation falls :
                     This way is nice interally to see if the tutorial is completed as all the User object has to keep
                     is a raw binary str that will occasionally be checked against a Tutorial intance's desired value.
                     The issue is externalising this. There might be a cheap mathematical way of doing this but since 
                     im just using bins theres no way of telling the user "oh your 20% done with this tutorial".
            * series - A boolean value
                |- Defaults to not being part of a series of related tutorials (ie: How to Python pt.1
                   and How to Python pt.2) but if this changes for whatever reason it can. Nice to have
                   if we wanna link related videos to this node style --will add that if you guys are on board with it
            * id - A String or Int value
                |- This one will likely change from its current implementation -- not sure 
                   whether to generate this myself or copy the one generated by the database
                   (if there is one) for consistency
    """
    def __init__(self, name, url, checks, series = False, genre = "Misc."):
        self.__name = name
        self.__url = url
        self.__checks = checks
        self.__completion = self.set_Completion(checks)
        self.__series = series
        self.__genre = genre #this must have Capital first character followed by lowercase everything else
        if self.__series is True:
            self.__related = set()
        else:
            self.__related = None

### GETTERS

    """
        Getter for the String of tutorial instance's name
    """
    def getName(self):
        return self.__name

    """
        Getter for the raw String url
    """
    def getUrl(self):
        return self.__url

    """
        Getter for the number of checks in Tutorial
    """
    def getCompletion(self):
        return self.__completion

  
    """
        Getter for the String for genre
    """
    def getGenre(self):
        return self.__genre

### SETTERS
    
    """
        Makes a binary literal of size n, of 1s this is for the completion check
        might change if externalising this as a percentage turns out tedious
        Expanded upon above the constructor.
    """
    def set_Completion(self,numChecks):
        stringRep = ""
        for i in range(numChecks):
            stringRep += "1"
        raw_binary = bin(int(stringRep,2)) # take string then make that into literal bin str
        return raw_binary

    """
        Sets new boolean value for series -- this WILL be a one way change: False -> True
        added additional functionality to add an object to series as this acts as a mini init
    """
    def giveSeriesStatus(self, relatedObj = None):
        if self.__series:
            return "Already a series"
        self.__series = True
        self.__related = set()
        if relatedObj != None:
            self.addRelated(relatedObj)
        return "Now is a series"

    """
        Adds a new Tutorial Obj to the set of related videos
    """
    def addToSeries(self, other):
        self.__related.add(other) # add relation to this obj's set of Series
        other.addToSeries(self) # add relation to Other obj's set of Series

    """
        Modifies the exist category if need be //used to be the deprecated category variable
    """
    def reSet_Genre(self, newGenre):
        self.__genre = newGenre
    
### Misc. functions

    """
        In theory, when called would check this tutorial instance's completion bin num
        to the User object's current one. Returns boolean value if completion is true or not
    """
    def comp_Check(self, user_bin):
        xor_val = int(self.__completion, 2) ^ int(user_bin, 2) #reInt these before bitwise op
        if xor_val != 0:
            return False
        return True

    """
        Returns what the series status is for instance (default is False)
    """
    def is_Series(self):
        return self.__series

    """
        Changes tutorial instance name
    """
    def change_Name(self, newName):
        self.__name = newName
